JavaScript
基础！！
1. 交互行为  时间7.18
   1.1. JavaScript通过事件驱动的形式产生页面行为
   1.2. 事件定义了UI与用户的交互方式
   1.3. UI以及UI的行为交互，要以用户体验UX为原则 (人性，人类行为)
   1.4. UX 用户体验设计
《---------------------------------------Javascript 时间7.18    -----------------------------------------------》
2. Javascript 时间7.18
    2.1.作用：
          a. 验证客户端输入信息
          b. 页面特效
          b. 富客户端业务逻辑
          e. 提升用户体验，带来丰富的交互效果
          f. 页面组建化开发，重用页面的功能组件,模块化开发
    2.2. 特征：
          a. 面向过程
          b. 面向对象
          c. 函数式编程 
《----------------------------------------过程式编程   时间7.18  -----------------------------------------------》
3. 过程式编程   时间7.18
    3.1. 算法
           3.1.1. 定义：解决一系列问题，所需要的步骤的集合
           3.1.2. 计算机算法：处理某类特点的信息，所需要的步骤集合
    3.2. 数据结构      
           3.2.1. 定义：信息的物理结构和逻辑结构
           3.2.2. 线性
                    a. 数组
                    b. hash ({key:value})
           * 3.2.3. 非线性
《-----------------------------------------算法 时间7.18 -----------------------------------------------》
 4. 算法 时间7.18
     4.1. 顺序结构
     4.2. 选择结构  switch() {case:....;break;}
     4.3. 循环结构 for{..;..;..} do{}while() while(){} 
《-------------------------------------------变量 时间7.18    -----------------------------------------------》
 5. 变量 时间7.18
     5.1. 变量是一段存储特定数据的内存单元
     5.2. 变量名是一段内存地址的名称
     5.3. 一段内存里面存放的数据，叫做变量的值
     5.4. 变量命名：变量名, 一律是字母，数字，下划线，$的组合，并且不能以数字开头，且不能是该编程语言的关键字
     5.5. camel命名法:变量首字母小些，其余字母小些，之后的单词首字母大写
     5.6. 类型: Javascript是弱类型，在执行时动态确定类型的语言
     5.7. js的数据类型
            5.7.1. number 数字
            5.7.2. boolean 布尔型，逻辑型 （true，false）
            5.7.3. string 字符串 
            5.7.4. Array 数组  (数组是js内置的数据类型吗？) 
                     a. var arr = new Array();
                     b. var arr = Array();
                     c. var arr = [];
            5.7.5. object 对象 (关联数组, 数组)
                     var obj = {key1:value1; key2:value2...};
            5.7.6. Function 
                                                         在js当中，函数也是一种数据类型！！！
            5.7.7. undefined 未定义
                  var bar; document.write(bar);//undefined 类型是undefined
                                              但对于  var bar=null document.write(bar);//undefined 类型是object
《-----------------------------------------运算符   时间7.21  -----------------------------------------------》
6. 运算符   时间7.21
    6.1. 赋值运算符  ＝ 
          	把一个值存放到变量所指示的内存空间当中
    6.2. 逻辑运算符
           && and :  参与运算的两个值都是true，结果则为true
           ||  OR :   参与运算的两个值都为fasle，结果则为false
           !    NOT: 逻辑取反，假变真，真变假
    6.3. 算数运算
           + 
           -
           *
           /
           % 取余数
           自增，自减++，-- ：在变量前，先运算，再读取，在变量后，先读取，再运算
           +=, -=,*=,/*,%=
    6.4. 关系运算
           注意：关系运算（关系表达式）运算结果是boolean类型
            >, <, >=, <=, ==,!=,===

            == : 比较值是否一致
            ===：比较值，类型
    6.5. 运算符优先级
            ! ,   算数运算,关系运算符，&&，||
            注意：推荐使用()保证运算符优先级
    6.6. 类型转换      
            6.6.1. 隐式转换 (自动转换)
                      a.取决于运算符，例如＋，
                      	    1. var x='10';//string
          					   var y=10;//number--》string
          					   document.write(typeof(x+y)); //进行类型转换 
          					对于上面x,y 相加 会将number--》string，-*/都转化为number
                      b.类型兼容的值,会发生自动转换
            6.6.2. 显式转换 (强制转换)
                  6.6.2.1. 字符串转换为数字：
                      parseInt()： 把目标变量转换成整形 转换不了会输入NaN非数字
                           2.   var x='10';
          				        var y=12.13;
          						var z=parseInt(x);//强制类型转换
          						document.write(typeof(y+z));//number 22
                      parseFloat(): 把目标变量转换成浮点数
                  6.6.2.2.  非字符串类型转字符串
                      foo.toString()
    6.7. 空值 
             6.7.1. null 空值，空引用（空指针），表示引用类型的变量没有指向任何对象.
             6.7.2. underfined: 变量未定义或未初始化。js解释器无法确定其类型.
             6.7.3. null和underfined值相等，类型不等，或者说，两者相等，但是不恒等。
             6.7.4. 在if判断当中，0，null，underfined,空字符串''都视为false，其它都视为true
《----------------------------------------条件结构     时间7.21    -----------------------------------------------》
7. 条件结构     时间7.21 
    7.1. 一般结构      
    if (关系表达式) {
         语句1;
    } else {
         语句2 ;
    }  

    7.2. 嵌套
     if (条件1) {
         语句1;
     } else if (条件2) ｛
          语句2;
     ｝ else if (条件 i) ｛
          语句i;
     ｝....
     else {
         语句n；
     }
		练习1:  给你1999元，拿去花,呵呵。请问：里面可以分别包含多少张各种面额的人名币钞票,使得钞票总数最少.
		练习2:  任意给定一个整数，判断是否为5的倍数
		练习3： 判断一个数是否能被2，3，5同时整除
《----------------------------------------- 循环结构 时间7.21 -----------------------------------------------》
8. 循环结构 时间7.21
    8.1. while (条件) {
               循环语句块;
           }
    8.2. do {
               循环语句块;
           } while(条件);

           do...while至少执行一次
     8.3. for (定义循环变量; 循环条件; 改变循环变量) {
          循环语句块;
     } 
     8.4. break; 跳出循环，break所在的循环体结束
     8.5. continue;   结束本次循环，继续进行下一次循环  
		练习：
     		1. 循环打印＊，形成正直角三角形
     		2. 倒直角三角形
    		3. 等腰三角形
     		4. 倒等腰三角形
     		5. 菱形
     		6. 打印9 x 9乘法表，要求打印格式整齐
     	  * 7. 空心菱形
《-----------------------------------------------相关代码在6文件  -----------------------------------------------》
《---------------------------------------------数组   时间7.22-----------------------------------------------》
9. 数组  时间7.22
    9.1. 定义：一组在连续的内存空间中存储的多个数据，多个数据组成的线性顺序结构.
    9.2. 声明方式：
           a. var arr = new Array();
           b. var arr = Array();
           c. var arr = [];
    9.3. 访问
            arr[整形下标]   

					练习：1. 找出数字数组当中的最小值
         				2. 找出最接近数组元素平均值的元素  

		9.4 条件表达式         
    关系表达式r ? 表达式1 : 表达式2;
    运算过程：先判断r，r的值为true,则以表达式1的结果为运算结果，否则取表达式2的值为运算结果
		9.5 常用数组操作    
    	  9.5.1. 在指定位置插入元素
    		9.5.2. 删除指定位置的元素    
    		9.5.3. 反转数组里的元素,要求只在一个数组中进行
           		arr.reverse()：实现数组元素翻转
    		9.5.4. 把两个数组合并成一个数组
           		newArr = arr1.concat(arr2); 
    		9.5.5. 栈操作 （FILO）
           		arr.push(ele) 入栈,把元素添加到数组末尾
           		arr.pop()  出栈, 返回数组中的末尾元素，并从数组中删除该元素
    		9.5.6. shift() 删除并返回数组的第一个元素       
    	* 9.5.7. slice(start,end) ，从数组中选择start开始，end结束的元素，以一个新数组返回 
    		9.5.8. arr.indexOf(元素) 得到指定元素在数组arr当中的下标
    		9.5.9. splice(index,howMany,item1,item2...)
    						splice(1,1) 从1位置开始删除，删除一个  
    						（删除元素，并向数组添加新元素,包含被删除项目的新数组，如果有的话。）
      				练习：给定一个数组，Array(134,5345,345,2425,17,19,23),要求，删除素数  
    9.6 关联数组（对象）
    		9.6.1. 键值对  既是对象又是关联数组
    						var obj={
    							id:1,
    							name:'fy'
    						};
    						//两种访问获取值的方式
    						document.write(obj.id)//1
    						document.write(obj['id'])//1
    		9.6.2. 关联数组中再定义数组
								var obj={
    							id:1,
    							name:'fy',
    							coument:[1,3,4,5]
    						};
    						var c=obj.coument;
    						for(var i in c){
    							document.write(c[i])// 1,3,4,5
    						}
    		9.6.3. 索引数组中定义关联数组（hash数组）json
    					 在索引数组中嵌套关联数组，然后在关联数组中再嵌套索引数组：
    					 		
《--------------------------------   数组相关代码在 7 文件里面     ----------------》
《-------------------------------- 日期   7.22  8文件 ---------------------------》
10.日期：
	10.1.定义日期对象：var now = new Date();
					var now = new Date('2003-4-5')//自定义时间格式
	10.2.获取日期：
			now.getFullYear() 得到4位数年
			now.getMonth() 得到月份 0-11 所以要自加1 now.getMonth()+1
			now.getDate()  得到天
			now.getHours()	得到小时
			now.getMinutes()	得到分钟	
			now.getSeconds()	得到秒
	10.3.时间戳
			now.getTime() 返回 1970 年 1 月 1 日至今的毫秒数。时间戳
			Date.parse('1996/6/1') 返回1970年1月1日午夜到指定日期(1996/6/1)（字符串）的毫秒数。
	10.4.设置时间
			now.setFullYear() 
			now.setMonth() 
			now.setDate() 
			now.setHours()	
			now.setMinutes()		
			now.setSeconds()	
《--------------------------------   日期相关代码在8文件     ------------------------------------》		 
《--------------------------------   函数  7.25  9文件  ------------------------------------》	
11.函数
	11.1.函数定义：是一种数据类型
			function 函数名(){
				//函数体
			}
			windows.onload=function (){
						函数。。。
			}//任何一个Js函数都写在里面 在html页面中调用 js代码的<script></script>无论写在
			  <head></head> 还是<body></body>都不影响
	11.2.函数的作用：
		11.2.1.把一段处理特定功能的程序，或可被重复使用的代码，打包到一起做为一个子程序，被调用
    	11.2.2.可以提高可维护性，让代码可复用，并且使得编程更高效，更可靠。
    	11.2.3.使得较复杂的程序，实现模块化 
	11.3.带参数的函数
    	function 函数名(arg1,arg2....argi...argn) {
         		// 函数体
    		}
    	11.3.1. 以上arg1~argn表示形参
    	11.3.2. 调用：函数名(p1,p2..pi...pn)
           		以上的p1~pn表示实参
	11.4.函数返回值
    	11.4.1. 函数的处理结果，返回到调用处
    	11.4.2. return语句

	11.5.javascript变量的作用域
    	11.5.1. 函数内部定义的变量，叫做局部变量
    	11.5.2. 在脚本所有函数外定义的变量，叫做全局变量
    	11.5.3. 局部变量只在定义它的函数内可访问,外界无法访问
    	11.5.4. 全局变量在脚本任意函数或函数外，都可访问

	11.6.回调函数 (callback)
    	11.6.1. 函数是一种数据类型
    	11.6.2. 函数名称实际是一个函数类型的变量，是一个函数的地址，因此可以像变量一样，传递给其它变量
    	11.6.3. 函数类型变量();表示执行或调用该函数
    	11.6.4. 函数a的某个参数b是一个函数类型，那么b就叫做回调函数
    	11.6.5. 作用：增强代码的复用性，可维护性，灵活性
    			window.onload = function (){
					var foo = 20;
					var i = function(){
					var bar = 5;
				return function(x){//x=20
					return x*bar;
					}(foo);//20  自调函数
				}

	11.7. 匿名函数
    	11.7.1. 声明函数时，不定义函数名，一般用于回调函数。
    			var i = function() {
    				函数体
    			}

	11.8. 自调函数   实例（10文件）
		11.8.1 定义：
				(function(){
					var bar = 20;
					ducument.write(bar);
					})();//函数自调
					
					(函数)();
					
《--------------------------------   DOM 7.25    ------------------------------------》	
12.1. 事件驱动
    12.1.1. html文档的可编程模型，叫做文档对象模型(DOM)，按照XML或html的标签（元素，节点）结构构建的可编程接口(API)
    12.1.2. DOM交互编程，通过事件来响应用户行为 
    12.1.3. 通过事件模型，用js编写事件处理函数来响应事件
    12.1.4. 响应事件的函数，叫做事件处理函数

12.2. BOM (浏览器对象模型)
    12.2.1. window 
           2.1.1. innerWidth, innerHeight, 浏览器尺寸 会随着浏览器的伸缩变化
           2.1.2. alert() 弹出警告框(对话框)
           2.1.3. confirm() 弹出对话框
           2.1.4. setTimeout(callback, delay)在delay毫秒之后，执行callback一次
         
           2.1.5. setInterval(callback, delay) 每隔delay毫秒执行一次callback
           2.1.6. window.load = function() {...js代码}无论.html中的<script>
           		     无论放哪里都可以直接执行
           2.1.7. requestAnimationFrame()本质是一个回调函数 ，但可以用作计时器，效率比settimeout 和 setinterval 好
                  	var h = 1;
			     	var intervalId = requestAnimationFrame(show);
			     		function show(){
			        		 h++;
				   		if (h>100) {
					   		cancelAnimationFrame(intervalId);//取消函数调用
					   		return;
				   		}
				    	requestAnimationFrame(show);
					}
    12.2.2. Location      
           2.2.1. window.location(url) 跳转到另一个页面
           2.2.2. window.history 历史记录 
    12.2.3. Navigator  对象包含有关浏览器的信息。
           2.3.1. userAgent 返回由客户机发送服务器的 user-agent 头部的值。
    12.2.4. Screen
           2.4.1. availWidth 浏览器的宽，无论浏览器怎么伸缩值都不会改变
           2.4.2. availHeight  浏览器的高
    12.2.3. history
           12.2.3.1. back() 
           			 history.back() 后退一个网页
           			 -1 后退 1前进
           12.2.3.2. forward() 
           		     history.forward() 前进一个网页 -1 后退 1前进
           12.2.3.3. go() 方法可加载历史列表中的某个具体的页面。
           			history.go(-1)==history.back()
           			history.go(1)==history.forward()
			补充：
         			1. 对象是属性与方法封装到一起的集合,表示一个特定的事物或信息结构                
12.3. DOM——Document    
    12.3.1. HTML DOM 把 HTML 文档呈现为带有元素、属性和文本的树结构（节点树）。
    12.3.2. 文档 Document
           12.3.2.1. 浏览器载入一份html文档之后，浏览器会在内存中创建一个DOM树,每个元素为一个节点
    12.3.3. 元素与节点 (Element and Node)
           12.3.3.1. Node：节点，xml/html任意标签元素，以及属性，标签内的文本，都视为Node
           12.3.3.2. Element:xml/html任意完整标签元素，视为元素Element
           12.3.3.3. 元素由元素类别(标签名称)，属性，方法，事件构成
    12.3.4. 获取页面dom元素
           12.3.4.1.document.getElementById(id) 根据id获取唯一一个元素   （获得HTML文档）  
           12.3.4.2.document.getElementsByClassName(cls) 获得元素集合
           			根据class获取元素集合，集合用item（）调用，调用的是里面的 元素 即HTML文档， 集合本身有长度
           12.3.4.3.document.getElementsByTagName(tag)获得节点集合
           			根据元素标签名称获取元素集合，集合用item（）调用， 有长度
           12.3.4.4.document.querySelector('#d1 table');获得id为d1下的子元素标签table HTML文档
           			，里面如果有2个table 在为元素集合
    12.3.5. dom的遍历     
           12.3.5.1. 获取子元素   
                     a.childNodes 获取子节点 他是一个节点集合  里面包含 文本，元素HTML文档
                     b.children 获取子元素  他是一个 HTML集合，里面不包含文本，需要通过 xx.children.item(i).innerHTML调用里面的文本
           12.3.5.2. 获取父节点 parentNode  得到的是元素，HTML文档
           12.3.5.3. 获取相邻的节点（兄弟节点）
                     a. previousElementSibling 前一个兄弟元素
                     b. previousSibling 前一个兄弟节点
                     c. nextElementSibling 后一个兄弟元素
                     d. nextSibling 后一个兄弟节点
           12.3.5.4.元素与节点 的理解
           			window.onload = function (){
						var d1 = document.getElementById('d1');//获取id 为d1 的元素
						var d2 = document.getElementsByClassName('d2');//是获得 class 为d2 的集合
						console.log(d1);//是一个此元素的 HTML文档
						//console.log(d1.children.item(0));
						//HTML文档里面有子 元素 子元素中也有定义子元素
						console.log(d2);//得到的是 元素集合
						console.log(d2[0]); //得到的是 元素集合 0位置里面的 元素文档
						console.log(d2[0].children)//得到的是 元素集合 0位置里面的 元素文档的子元素集合
						console.log(d2[0].childNodes)//得到的是 元素集合 0位置里面的 元素文档的子节点集合，里面包含元素，元素的文本
						console.log(d2[0].childNodes[0])//得到的是 元素集合 0位置里面的 元素文档的子节点集合中的0个位置的节点 
						//有可能是文本有可能是元素
						console.log(d2[0].children[0])//得到的是 元素集合 0位置里面的 元素文档的子元素集合中0位置的子元素文档
						//HTML集合里面不能调用子节点和子元素的属性
						//只能通过 d2[i]来获取集合里面的HTML文档
						//从元素文档获取 父亲 parentNode 得到是一个元素文档
						//获取到里面HTML文档后 就可以通过children 或者chilnode 来获取里面的子元素 获取子节点，
						//但里面子元素也是集合！！ 但总之获取节点的都是集合 里面包含元素和元素的文本
						}
			作业：
			        根据homework.html页面，点击第二行的work按钮 完成下面的任务：
			        1. 获取当前行的姓名，年龄，以及修改
			        2. 获取上一行的姓名，年龄，修改
			        3. 获取下一行的姓名，年龄，修改
			        4. 分别修改主标题，副标题的内容        // 10文件 dom.js dom.html
			        
《-----------------------------------DOM——Event  7.26 11文件-------------------------------------》

12.4. DOM——Event --->>相关代码在 11文件（下拉选择select的动态使用，事件监听）
	12.4.1. Event  事件
    12.4.1. 事件 
           click 单机
           load  加载  如:window.load
           dblclick 双击
           keydown
           keypress
           keyup
           ......
    12.4.2. 事件处理函数(事件监听器)
           12.4.2.1. 事件被触发后，需要执行的回调函数，叫做事件监听器


    12.4.3. 绑定事件监听 
           12.4.3.1. document.getElementbyId.addEventListener(eventName, function(){..})
           12.4.3.2. document.getElementbyId.onxxx = function(){....}
    12.4.4. 在事件监听函数中， 访问触发事件的元素 
           12.4.4.1. this 指当前元素
           12.4.4.2. 假设监听函数的参 数名为：e，e.target,指向触发此事件的元素
    12.4.5. 元素的创建，删除
       	   12.4.5.1. document.createElement('标签名') 创建元素 
       	   12.4.5.2. element.appendChild(ele) 添加子元素
       	   12.4.5.3. 删除子元素 
       	   12.4.5.4. element.removeChild(要被删除的子元素node对象)如 XX.parentNode或者XX.childNodes

《----------------------------通过dom 来操作Css样式  7.27 文件12-------------------------------------》

12.5. className属性 
    12.5.1. 是字符串类型  元素.className 获取到的里面的值是字符串
    12.5.2. 多个类，用空格分隔开
12.6. classList属性
    12.6.1. classList是一个集合类型，可以包含多个类，但是有兼容性问题
    12.6.2. classList的方法：
           12.6.2.1. contains(类名):判断元素是否拥有指定的类
           12.6.2.2. add(类名):给元素添加类
           12.6.2.3. remove(类名):删除元素指定的类
12.7. 操作行内样式 
    12.7.1. element.style 属性 
           12.7.1.1. style.css.属性名 = "属性值" 
           注意：属性名必须用camel命名法
           12.7.1.2. style.cssText 里面写完整的css样式文本


《----------------------------通过dom 动态下拉列表  7.28 文件13-----------------》

在文件13里，主要练习 dom 操作css样式 使列表变成自动下拉 点击下拉 
1.以横向滑动某个元素下拉一个列表为例子
2.点击选择省份且选择市的列表会自动选取省份里的市 的选择列表

《----------------------------通过dom 动态下拉列表  7.29 文件14-----------------》

以纵向菜单栏，点击菜单自动下拉列表为例子

《----------------------------通过js通过form提交 动态下拉列表  8.1 文件15-----------------》
13.1. js控制表单提交三种办法
    13.1.1. 如果提交按钮是<input type="submit" />,使用事件参数e.preventDefault()方法阻止表单默认的提交方式
    13.1.2. 同上，单击事件处理函数，返回值true提交，false不提交
    13.1.3. 如果采用普通按钮或<a>标签，使用按钮对象的ele.submit()方法显式提交表单
    		ele onclick = function(){
    			ele.submit()
    		}
    13.1.4. 也可以通过 form.submit() 提交表单 
13.2. 表单验证思路
    13.2.1. 获取表单元素所有需要处理的元素dom对象
    13.2.2. 分别写出验证每一项的验证函数, 函数必须返回boolean值,并且显示错误提示
    13.2.3. 在每个表单元素的blur事件(失去焦点)关联或调用对应的验证函数(onfocus 获得焦点事件)
    13.2.4. 在提交按钮的单击事件处理函数中，验证所有表单项   
13.3. 相关方法 isNaN(parsetInt(x)) 判定x 是否为非数字 非数字为NaN

//《----------------js正则表达式 文件16 8.2 ----------------------》》
   
14.1. 基本规律
    14.1.1. [] 字符范围
    14.1.2. | 或
    14.1.3. - 连续的字符范围: [a-A]
    14.1.4. {m,n} 重复前面的字符m次到n次， {n,}匹配n次或n次以上 ，{n} 匹配n次
    14.1.5. ^ 限定开头  如果在[]内 则为非 如：[^4] 除了4以外的其他字符
    14.1.6. $ 限定结尾
    14.1.7. \w 表示大小写字符，数字，下划线--- 等价于[a-zA-Z0-9_] 大写 \W 匹配任何非字符等价于([^a-zA-Z0-9_])
    14.1.8. \d 表示数字 [0-9] 大写 \D 非数字
    14.1.9. + 表示重复前面的字符一次或多次 {1,}
    14.1.10. * 表示重复前面的字符零次或多次 {0,}
    14.1.11. ? 表示重复前面的字符零次或一次 {0,1}
    14.1.12. 转义字符  \  如： \. 使得 “.”可以匹配任意字符的正则的'.'变成普通的'.'
    14.1.13. . 字符 匹配任意一个字符
    14.1.14. () 子表达式  注意 ([a-A]+[0-9]+){6,}这种格式是错误的，不能有{..} 
    					对于([a-A]+){6}可以有{..}出现
14.2. js与正则表达式
    14.2.1. 正则表达式对象 RegExp  re = new RegExp(/正则表达式/)
                          表达式包含在一对//当中

    14.2.2. 字符串 str.match(regex) 返回字符串str中匹配regex正则表达式的部分 var regex=/正则表达式/
    	  var str="Visit Microsoft!"
    	  document.write(str.match(/Vi/)) 
				//Vi
    14.2.3. str.replace(regexp,newStr,function)
                           把字符串str符合regexp定义的部分替换成newStr,返回替换之后的字符串
           	如： var str="Visit Microsoft!"
				document.write(str.replace(/Microsoft/, "W3School")) 
				//Visit W3School!
    14.2.4. regex.test(str),检测字符串str是否匹配正则表达式regex的定义，不匹配返回false
			var regExp = /^\w+@\w+\.\w+$/;
			var email = uname.value.trim();
				if(regExp.test(email)){函数体}
		例子
		//判断日期类型是否为YYYY-MM-DD hh:mm:ss格式的类型    
		function IsDateTime(){     
   			 var str = document.getElementById('str').value.trim();    
    			if(str.length!=0){    
      				  var reg = /^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2}) (\d{1,2}):(\d{1,2}):(\d{1,2})$/;     
        				var r = str.match(reg);     
        		if(r==null) 
        			alert('对不起，您输入的日期格式不正确!'); //请将“日期”改成你需要验证的属性名称!    
    			}    
			}

//《--------------- ----------------------》》









