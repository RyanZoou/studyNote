此文件说明了，python基础语法与PHP的不同之处

一、基本数据类型及操作
⏰ 在python中有两种除法运算符，'/'和'//'
    1、'/' 两数相除的结果为浮点数
    2、'//' 两数相除的结果为整数

⏰ Python的字符串（相关编码问题参见 廖雪峰博客，Google浏览器已经添加标签）
    1、由于编码问题，我们需要让非英文字符正常展示，通常需要在文件开头设置编码，常用操作：
        #!/usr/bin/env python3  （这是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；）
        # -*- coding: utf-8 -*- （这是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。）
    2、字符串的格式化问题
        1）在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：
            >>> 'Hello, %s' % 'world'
            'Hello, world'
            >>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
            'Hi, Michael, you have $1000000.'
            常见的占位符有：
                占位符	替换内容
                %d	    整数
                %f	    浮点数
                %s	    字符串
                %x
            其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：
                print('%2d-%02d' % (3, 1))
                print('%.2f' % 3.1415926)
            如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
                >>> 'Age: %s. Gender: %s' % (25, True)
                'Age: 25. Gender: True'
            有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
                >>> 'growth rate: %d %%' % 7
                'growth rate: 7 %'

        2）另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：
            >>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
            'Hello, 小明, 成绩提升了 17.1%'

    3、python中，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情。
        但是int()函数如果发现一个字符串并不是合法的数字时就会报错，程序就退出了。

    ⏰⏰⏰ 4、在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。
       Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。
        >>> 'ABCDEFG'[:3]
        'ABC'
        >>> 'ABCDEFG'[::2]
        'ACEG'



⏰ python中list（也即PHP中的索引数组）常见操作
    1、定义方式：
        classmates = ['Michael', 'Bob', 'Tracy']
    2、获取元素数量
        paramsNum = len(classmates)
    3、索引访问元素
        classmates[0] => 'Micheal'
        classmates[1] => 'Bob'
        classmates[-1] => 'Tracy'
        classmates[3] => IndexError: list index out of range

    4、⏰⏰⏰ 数组切片：（列表数据类型的范围取）
        classmates[0:2] => ['Bob', 'Bob']
        a = [1,2,3,4,5,6,7,8,9,0]
        a[start:stop:step]
        ⭕️ start：允许控制范围从哪里开始 （用于列表时，指示开始索引的值）
        ⭕️ stop：允许控制范围从哪里结束 （用于列表时，指示到哪个索引值结束，但是不包括该索引）
        ⭕️ step：允许控制的范围如何生成 （列表时，表示索引每次取值间隔）

        ⏰：如果没有开始值，则默认从0开始            a[:4] => [1,2,3]
        ⏰：如果没有结束值，则取列表允许的最大值      a[6:] => [6,7,8,9,0]
        ⏰：如果没有指定步长值，则默认值为1          a[::2] => [1,3,5,7,9]


    4、索引数组的改变
        classmates.append('Adam') => ['Michael', 'Bob', 'Tracy', 'Adam']              #往list中追加元素到末尾
        classmates.insert(1, 'Jack') => ['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']   #把元素插入到指定的位置，比如索引号为1的位置
        classmates.pop() {return 'Adam'} => ['Michael', 'Jack', 'Bob', 'Tracy']       #删除list末尾的元素
        classmates.pop(1) {return 'Jack'} => ['Michael', 'Bob', 'Tracy']              #要删除指定位置的元素，用pop(i)方法，其中i是索引位置
        classmates[1] = 'Sarah' => ['Michael', 'Sarah', 'Tracy']                      #要把某个元素替换成别的元素，可以直接赋值给对应的索引位置
    5、list中能包含的数据结构与PHP中类似,但是操作上却很是不同
        例如：
         a = [1, 2, 3, 4, 5]
         b = a;
         print(b)  => [1, 2, 3, 4, 5]
         b.append(6)
         print(b)  => [1, 2, 3, 4, 5, 6]
         print(a)  => [1, 2, 3, 4, 5, 6]
        ⚠️：python中的直接赋值操作是 引用 共享，他们共享list，只是换了叫法⏰⏰⏰
        真正的内容复制应当这样做：
            b = a.copy()


⏰ python元组的基础语法
    1、另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：
        定义方式： classmates = ('Michael', 'Bob', 'Tracy')  #⚠️是小括号
      现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。
      其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。

    2、️优点：因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。

    3、️要点：
        1）当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来。
        2）如果要定义一个空的tuple，可以写成()。
        3）坑：当元组只有一个元素时不能写成 t = (1),因为这样做python会把小括号当作是运算符而不是定义元组，
              所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义，因此常定义成 t=(1,)。
        4）⏰ 可变的tuple:
            >>> t = ('a', 'b', ['A', 'B'])
            >>> t[2][0] = 'X'
            >>> t[2][1] = 'Y'
            >>> t
            ('a', 'b', ['X', 'Y'])
          表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，
          所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，
          但指向的这个list本身是可变的！理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。
⏰ python字典（dict）的基础语法
    1、定义方式：
        d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
        >>> d['Michael'] => 95
    2、判断键是否存在：
        1）>>> 'Thomas' in d => False
        2)二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：
            >>> d.get('Thomas')
            >>> d.get('Thomas', -1)
            -1
    3、删除一个key
        d.pop('Bob')
        75
        >>> d
        {'Michael': 95, 'Tracy': 85}

二、函数操作
⏰ 在python中函数的参数定义有三种方式，
  1. 不变参数
    定义方式：func name(a,b,c)
    这种方式下的参数传递必须是一一对应，缺失或是多传参数都会报错
  2. 可变参数
    定义方式： func name(*params)
    ⏰ 这种方式的传参可以随意，可以传一个，多个，或者是不传，这些可变参数在函数调用时自动组装为一个tuple。
  3. 关键字参数
    可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你
    传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：
        def person(name, age, **kw):
            print('name:', name, 'age:', age, 'other:', kw)
    函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数：
        >>> person('Michael', 30)
        name: Michael age: 30 other: {}
    也可以传入任意个数的关键字参数：
        >>> person('Bob', 35, city='Beijing')
        name: Bob age: 35 other: {'city': 'Beijing'}
        >>> person('Adam', 45, gender='M', job='Engineer')
        name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}

    和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：
        >>> extra = {'city': 'Beijing', 'job': 'Engineer'}
        >>> person('Jack', 24, city=extra['city'], job=extra['job'])
        name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

    当然，上面复杂的调用可以用简化的写法：
        >>> extra = {'city': 'Beijing', 'job': 'Engineer'}
        >>> person('Jack', 24, **extra)
        name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

    **extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，
    注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。

  4. 命名关键字参数
    对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数，如果要限制关键字参数的名字，就可以用命名关键字参数，
    例如，只接收city和job作为关键字参数。这种方式定义的函数如下：
        def person(name, age, *, city, job):
            print(name, age, city, job)

    和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。

    调用方式如下：
        >>> person('Jack', 24, city='Beijing', job='Engineer')
        Jack 24 Beijing Engineer

    如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：
        def person(name, age, *args, city, job):
            print(name, age, args, city, job)

    命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：
        >>> person('Jack', 24, 'Beijing', 'Engineer')
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: person() takes 2 positional arguments but 4 were given

    由于调用时缺少参数名city和job，Python解释器把这4个参数均视为位置参数，但person()函数仅接受2个位置参数。
    命名关键字参数可以有缺省值，从而简化调用：
        def person(name, age, *, city='Beijing', job):
            print(name, age, city, job)

    由于命名关键字参数city具有默认值，调用时，可不传入city参数：
        >>> person('Jack', 24, job='Engineer')
        Jack 24 Beijing Engineer

    使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。如果缺少*，Python解释器将无法识别位置参数和命名关键字参数：
        def person(name, age, city, job):
            # 缺少 *，city和job被视为位置参数
            pass

  5. 参数组合
    在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。
    但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。比如定义一个函数，包含上述若干种参数：
    def f1(a, b, c=0, *args, **kw):
        print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)

    def f2(a, b, c=0, *, d, **kw):
        print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)

    在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。
        >>> f1(1, 2)
        a = 1 b = 2 c = 0 args = () kw = {}
        >>> f1(1, 2, c=3)
        a = 1 b = 2 c = 3 args = () kw = {}
        >>> f1(1, 2, 3, 'a', 'b')
        a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
        >>> f1(1, 2, 3, 'a', 'b', x=99)
        a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}
        >>> f2(1, 2, d=99, ext=None)
        a = 1 b = 2 c = 0 d = 99 kw = {'ext': None}

    最神奇的是通过一个tuple和dict，你也可以调用上述函数：
        >>> args = (1, 2, 3, 4)
        >>> kw = {'d': 99, 'x': '#'}
        >>> f1(*args, **kw)
        a = 1 b = 2 c = 3 args = (4,) kw = {'d': 99, 'x': '#'}
        >>> args = (1, 2, 3)
        >>> kw = {'d': 88, 'x': '#'}
        >>> f2(*args, **kw)
        a = 1 b = 2 c = 3 d = 88 kw = {'x': '#'}

    所以，对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。

    ⏰ 虽然可以组合多达5种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。


三、python的高级特性
⏰ 1. 切片（见上述例子）
    列表的切片：
    字符串的切片：
        在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。
        Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。

⏰ 2. 迭代
    Python的for循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。list这种数据类型虽然有下标，
    但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：
        >>> d = {'a': 1, 'b': 2, 'c': 3}
        >>> for key in d:
        ...     print(key)
        ...
        a
        c
        b
    因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。

    ⏰⏰⏰ 默认情况下，dict迭代的是key。
          如果要迭代value，可以用for value in d.values()，
          如果要同时迭代key和value，可以用for k, v in d.items()。

    由于字符串也是可迭代对象，因此，也可以作用于for循环
        >>> for ch in 'ABC':
        ...     print(ch)
        ...
        A
        B
        C

    ⏰⏰⏰：如何判别一个对象是否支持迭代；
    所以，当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。
    那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：
        >>> from collections import Iterable
        >>> isinstance('abc', Iterable) # str是否可迭代
        True
        >>> isinstance([1,2,3], Iterable) # list是否可迭代
        True
        >>> isinstance(123, Iterable) # 整数是否可迭代
        False

    最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？Python内置的 enumerate函数 可以把一个list变成索引-元素对，
    这样就可以在for循环中同时迭代索引和元素本身：
        >>> for i, value in enumerate(['A', 'B', 'C']):
        ...     print(i, value)
        ...
        0 A
        1 B
        2 C

    上面的for循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：
        >>> for x, y in [(1, 1), (2, 4), (3, 9)]:
        ...     print(x, y)
        ...
        1 1
        2 4
        3 9

⏰ 3. 列表生成式
    列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。

    举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用list(range(1, 11))：
        >>> list(range(1, 11))
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    但如果要生成[1x1, 2x2, 3x3, ..., 10x10]怎么做？方法一是循环：
        >>> L = []
        >>> for x in range(1, 11):
        ...    L.append(x * x)
        ...
        >>> L
        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

    但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：
        >>> [x * x for x in range(1, 11)]
        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

    ⏰⏰⏰ 写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。

    ⏰⏰⏰ for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：
        >>> [x * x for x in range(1, 11) if x % 2 == 0]
        [4, 16, 36, 64, 100]

    还可以使用两层循环，可以生成全排列：
        >>> [m + n for m in 'ABC' for n in 'XYZ']
        ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']

    运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：
        >>> import os # 导入os模块，模块的概念后面讲到
        >>> [d for d in os.listdir('.')] # os.listdir可以列出文件和目录
        ['.emacs.d', '.ssh', '.Trash', 'Adlm', 'Applications', 'Desktop', 'Documents', 'Downloads', 'Library', 'Movies', 'Music', 'Pictures', 'Public', 'VirtualBox VMs', 'Workspace', 'XCode']

    for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value：
        >>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
        >>> for k, v in d.items():
        ...     print(k, '=', v)
        ...
        y = B
        x = A
        z = C

    因此，列表生成式也可以使用两个变量来生成list：
        >>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
        >>> [k + '=' + v for k, v in d.items()]
        ['y=B', 'x=A', 'z=C']

    最后把一个list中所有的字符串变成小写：
        >>> L = ['Hello', 'World', 'IBM', 'Apple']
        >>> [s.lower() for s in L]
        ['hello', 'world', 'ibm', 'apple']

    如果list中既包含字符串，又包含整数，由于非字符串类型没有lower()方法，所以列表生成式会报错：
        >>> L = ['Hello', 'World', 18, 'Apple', None]
        >>> [s.lower() for s in L]
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          File "<stdin>", line 1, in <listcomp>
        AttributeError: 'int' object has no attribute 'lower'
    使用内建的isinstance函数可以判断一个变量是不是字符串：
        >>> [s.lower() for s in L if isinstance(s, str)]

⏰ 4. 生成器
    通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。
    而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，
    如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。

    所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？
    这样就不必创建完整的list，从而节省大量的空间。
    ⏰⏰⏰ 在Python中，这种一边循环一边计算的机制，称为生成器：generator。

    要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
        >>> L = [x * x for x in range(10)]
        >>> L
        [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        >>> g = (x * x for x in range(10))
        >>> g
        <generator object <genexpr> at 0x1022ef630>

    创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。
    我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？
    如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值：
        >>> next(g)
        0
        >>> next(g)
        1
        >>> next(g)
        4
        >>> next(g)
        9
        >>> next(g)
        16
        >>> next(g)
        25
        >>> next(g)
        36
        >>> next(g)
        49
        >>> next(g)
        64
        >>> next(g)
        81
        >>> next(g)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        StopIteration
    我们讲过，generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，
    没有更多的元素时，抛出StopIteration的错误。
    当然，上面这种不断调用next(g)实在是太变态了，正确的方法是使用for循环，因为generator也是可迭代对象：
        >>> g = (x * x for x in range(10))
        >>> for n in g:
        ...     print(n)
        ...
        0
        1
        4
        9
        16
        25
        36
        49
        64
        81
    所以，我们创建了一个generator后，基本上永远不会调用next()，而是通过for循环来迭代它，并且不需要关心StopIteration的错误。
    generator非常强大。如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。
    比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：
        1, 1, 2, 3, 5, 8, 13, 21, 34, ...
    斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：
        def fib(max):
        n, a, b = 0, 0, 1
        while n < max:
            print(b)
            a, b = b, a + b
            n = n + 1
        return 'done'

    注意，赋值语句：
        a, b = b, a + b
        相当于：
        t = (b, a + b) # t是一个tuple
        a = t[0]
        b = t[1]
        但不必显式写出临时变量t就可以赋值。

    上面的函数可以输出斐波那契数列的前N个数：
        >>> fib(6)
        1
        1
        2
        3
        5
        8
        'done'

    可以看出，fib函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。
    也就是说，上面的函数和generator仅一步之遥。要把fib函数变成generator，只需要把print(b)改为yield b就可以了：
        def fib(max):
            n, a, b = 0, 0, 1
            while n < max:
                yield b
                a, b = b, a + b
                n = n + 1
            return 'done'

    ⏰⏰⏰ 这就是定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
        >>> f = fib(6)
        >>> f
        <generator object fib at 0x104feaaa0>
    这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。
    而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。

    举个简单的例子，定义一个generator，依次返回数字1，3，5：
        def odd():
            print('step 1')
            yield 1
            print('step 2')
            yield(3)
            print('step 3')
            yield(5)

    调用该generator时，首先要生成一个generator对象，然后用next()函数不断获得下一个返回值：
        >>> o = odd()
        >>> next(o)
        step 1
        1
        >>> next(o)
        step 2
        3
        >>> next(o)
        step 3
        5
        >>> next(o)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        StopIteration

    可以看到，odd不是普通函数，而是generator，在执行过程中，遇到yield就中断，下次又继续执行。
    执行3次yield后，已经没有yield可以执行了，所以，第4次调用next(o)就报错。

    回到fib的例子，我们在循环过程中不断调用yield，就会不断中断。
    当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。

    同样的，把函数改成generator后，我们基本上从来不会用next()来获取下一个返回值，而是直接使用for循环来迭代：
        >>> for n in fib(6):
        ...     print(n)
        ...
        1
        1
        2
        3
        5
        8

    但是用for循环调用generator时，发现拿不到generator的return语句的返回值。
    如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：
        >>> g = fib(6)
        >>> while True:
        ...     try:
        ...         x = next(g)
        ...         print('g:', x)
        ...     except StopIteration as e:
        ...         print('Generator return value:', e.value)
        ...         break
        ...
        g: 1
        g: 1
        g: 2
        g: 3
        g: 5
        g: 8
        Generator return value: done

⏰ 5. 迭代器
    我们已经知道，可以直接作用于for循环的数据类型有以下几种：
    一类是集合数据类型，如list、tuple、dict、set、str等；
    一类是generator，包括生成器和带yield的generator function。
    这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。
    可以使用isinstance()判断一个对象是否是Iterable对象：
        >>> from collections import Iterable
        >>> isinstance([], Iterable)
        True
        >>> isinstance({}, Iterable)
        True
        >>> isinstance('abc', Iterable)
        True
        >>> isinstance((x for x in range(10)), Iterable)
        True
        >>> isinstance(100, Iterable)
        False

    而生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值了。

    ⏰⏰⏰ 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。
    可以使用isinstance()判断一个对象是否是Iterator对象：
        >>> from collections import Iterator
        >>> isinstance((x for x in range(10)), Iterator)
        True
        >>> isinstance([], Iterator)
        False
        >>> isinstance({}, Iterator)
        False
        >>> isinstance('abc', Iterator)
        False

    生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
    把list、dict、str等Iterable变成Iterator可以使用iter()函数：
        >>> isinstance(iter([]), Iterator)
        True
        >>> isinstance(iter('abc'), Iterator)
        True

    你可能会问，为什么list、dict、str等数据类型不是Iterator？
        这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，
        直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，
        只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。

    Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。

    小结
    凡是可作用于for循环的对象都是Iterable类型；
    凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；
    集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。
    Python的for循环本质上就是通过不断调用next()函数实现的

五、函数式编程

⏰ 1. mmap/reduce    (Python内建了map()和reduce()函数。）
    map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。
        >>> def f(x):
        ...     return x * x
        ...
        >>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
        >>> list(r)
        [1, 4, 9, 16, 25, 36, 49, 64, 81]
    map()传入的第一个参数是f，即函数对象本身。
    由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。

    map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x2，还可以计算任意复杂的函数，
    比如，把这个list所有数字转为字符串：
        >>> list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
        ['1', '2', '3', '4', '5', '6', '7', '8', '9']

    再看reduce的用法。reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：

reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
比方说对一个序列求和，就可以用reduce实现：

>>> from functools import reduce
>>> def add(x, y):
...     return x + y
...
>>> reduce(add, [1, 3, 5, 7, 9])
25
当然求和运算可以直接用Python内建函数sum()，没必要动用reduce。

但是如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：

>>> from functools import reduce
>>> def fn(x, y):
...     return x * 10 + y
...
>>> reduce(fn, [1, 3, 5, 7, 9])
13579
这个例子本身没多大用处，但是，如果考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()，我们就可以写出把str转换为int的函数：




⏰ 在python中函数的返回值也可以是多个，其实返回的是由多个变量组成的元组（tuple），我们可以用一个变量来接受
    元组的返回，也可以用多个对应的参数来接受每一个独立的值。